
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  0000044e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b11  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000694  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000629  00000000  00000000  0000177d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000226b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  7a:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Send_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	ef e3       	ldi	r30, 0x3F	; 63
  84:	ff e1       	ldi	r31, 0x1F	; 31
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <Send_Data+0x4>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <Send_Data+0xa>
  8c:	00 00       	nop
#include <string.h>

void Send_Data(unsigned char data)
{
	_delay_ms(2);
	PORTC |= 0x01;
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	91 60       	ori	r25, 0x01	; 1
  92:	95 bb       	out	0x15, r25	; 21
	PORTD=data;
  94:	82 bb       	out	0x12, r24	; 18
	PORTC |= 0x02;
  96:	85 b3       	in	r24, 0x15	; 21
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	85 bb       	out	0x15, r24	; 21
	PORTC &= 0xFD;
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <CommandLine_Place>:
  a4:	ef e3       	ldi	r30, 0x3F	; 63
  a6:	ff e1       	ldi	r31, 0x1F	; 31
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <CommandLine_Place+0x4>
  ac:	00 c0       	rjmp	.+0      	; 0xae <CommandLine_Place+0xa>
  ae:	00 00       	nop
}
void CommandLine_Place(unsigned char cmd)
{
	_delay_ms(2);
	PORTC &= 0xFE;
  b0:	95 b3       	in	r25, 0x15	; 21
  b2:	9e 7f       	andi	r25, 0xFE	; 254
  b4:	95 bb       	out	0x15, r25	; 21
	PORTD=cmd;
  b6:	82 bb       	out	0x12, r24	; 18
	PORTC |= 0x02;
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 bb       	out	0x15, r24	; 21
	PORTC &= 0xFD;
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	08 95       	ret

000000c6 <LCD_Write>:
}
void LCD_Write(char *s)
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	8c 01       	movw	r16, r24
	uint8_t l,i;
	l = strlen(s);				// get the length of string
  d0:	fc 01       	movw	r30, r24
  d2:	01 90       	ld	r0, Z+
  d4:	00 20       	and	r0, r0
  d6:	e9 f7       	brne	.-6      	; 0xd2 <LCD_Write+0xc>
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	de 2f       	mov	r29, r30
  dc:	d8 1b       	sub	r29, r24
	for(i=0;i<l;i++)
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	06 c0       	rjmp	.+12     	; 0xee <LCD_Write+0x28>
	{
		Send_Data(*s);			// write every char one by one
  e2:	f8 01       	movw	r30, r16
  e4:	81 91       	ld	r24, Z+
  e6:	8f 01       	movw	r16, r30
  e8:	0e 94 41 00 	call	0x82	; 0x82 <Send_Data>
}
void LCD_Write(char *s)
{
	uint8_t l,i;
	l = strlen(s);				// get the length of string
	for(i=0;i<l;i++)
  ec:	cf 5f       	subi	r28, 0xFF	; 255
  ee:	cd 17       	cp	r28, r29
  f0:	c0 f3       	brcs	.-16     	; 0xe2 <LCD_Write+0x1c>
	{
		Send_Data(*s);			// write every char one by one
		s++;
	}
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <LCD_Init>:
void LCD_Init()
{
	DDRD = 0xFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x03;
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 104:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 106:	12 ba       	out	0x12, r1	; 18
	CommandLine_Place(0x3E);
 108:	8e e3       	ldi	r24, 0x3E	; 62
 10a:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
	CommandLine_Place(0x0E);
 10e:	8e e0       	ldi	r24, 0x0E	; 14
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
	CommandLine_Place(0x06);
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
	CommandLine_Place(0x01);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
	LCD_Write("Glove Control");
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
	CommandLine_Place(0xC3);
 128:	83 ec       	ldi	r24, 0xC3	; 195
 12a:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
	LCD_Write("Car");
 12e:	8e e6       	ldi	r24, 0x6E	; 110
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	87 ea       	ldi	r24, 0xA7	; 167
 13a:	91 e6       	ldi	r25, 0x61	; 97
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <LCD_Init+0x40>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Init+0x4a>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <ADC_Init>:
	_delay_ms(2000);
}

void ADC_Init()
{
	DDRA=0x0;
 14a:	1a ba       	out	0x1a, r1	; 26
	ADCSRA |= (1<<ADEN) ;
 14c:	86 b1       	in	r24, 0x06	; 6
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS0);							// select reference for ADC
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	87 b9       	out	0x07, r24	; 7
	ADMUX = (0<<REFS1);	
 156:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);	// select clock s to 8 bit mode
 158:	86 b1       	in	r24, 0x06	; 6
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	86 b9       	out	0x06, r24	; 6
 15e:	08 95       	ret

00000160 <ADC_Convert>:
}
unsigned int ADC_Convert()
{
	unsigned int tmp1,tmp2,tmp3,t;
	tmp1 = (ADCL & 0x0F);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	8f 70       	andi	r24, 0x0F	; 15
	tmp2 = (ADCL >> 4) & 0x0F;
 164:	24 b1       	in	r18, 0x04	; 4
 166:	22 95       	swap	r18
 168:	2f 70       	andi	r18, 0x0F	; 15
	tmp3 = (ADCH & 0x0F);
 16a:	45 b1       	in	r20, 0x05	; 5
 16c:	4f 70       	andi	r20, 0x0F	; 15
 16e:	50 e0       	ldi	r21, 0x00	; 0
	tmp2 = tmp2*16;
 170:	60 e1       	ldi	r22, 0x10	; 16
 172:	26 9f       	mul	r18, r22
 174:	90 01       	movw	r18, r0
 176:	11 24       	eor	r1, r1
	tmp3 = tmp3*256;
 178:	54 2f       	mov	r21, r20
 17a:	44 27       	eor	r20, r20
	t = tmp1+tmp2+tmp3;
 17c:	b9 01       	movw	r22, r18
 17e:	68 0f       	add	r22, r24
 180:	71 1d       	adc	r23, r1
 182:	cb 01       	movw	r24, r22
	return t;
}
 184:	84 0f       	add	r24, r20
 186:	95 1f       	adc	r25, r21
 188:	08 95       	ret

0000018a <main>:

int main()
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	2c 97       	sbiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
	unsigned int msg2_flag=0,msg2_count=0;
	unsigned int msg3_flag=0,msg3_count=0;
	unsigned int msg4_flag=0,msg4_count=0;
	unsigned int msg5_count=0;
	
	DDRA = 0x00; // Data Direction IP.
 19e:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // Pull up
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	8b bb       	out	0x1b, r24	; 27
	
	DDRB = 0xFF; // Data Direction OP.
 1a4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00; // PORTA Output on LEDS
 1a6:	18 ba       	out	0x18, r1	; 24
	
	TCCR0=0x6B; // Timer 0
 1a8:	8b e6       	ldi	r24, 0x6B	; 107
 1aa:	83 bf       	out	0x33, r24	; 51
	
	LCD_Init();
 1ac:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Init>
	ADC_Init();
 1b0:	0e 94 a5 00 	call	0x14a	; 0x14a <ADC_Init>
	unsigned int fwd_flag=0,rev_flag=0,right_flag=0,left_flag=0;
	unsigned int msg1_flag=0,msg1_count=0;
	unsigned int msg2_flag=0,msg2_count=0;
	unsigned int msg3_flag=0,msg3_count=0;
	unsigned int msg4_flag=0,msg4_count=0;
	unsigned int msg5_count=0;
 1b4:	81 2c       	mov	r8, r1
 1b6:	91 2c       	mov	r9, r1
	unsigned int adc_value,ch_count=0;
	unsigned int fwd_flag=0,rev_flag=0,right_flag=0,left_flag=0;
	unsigned int msg1_flag=0,msg1_count=0;
	unsigned int msg2_flag=0,msg2_count=0;
	unsigned int msg3_flag=0,msg3_count=0;
	unsigned int msg4_flag=0,msg4_count=0;
 1b8:	1a 86       	std	Y+10, r1	; 0x0a
 1ba:	19 86       	std	Y+9, r1	; 0x09
 1bc:	41 2c       	mov	r4, r1
 1be:	51 2c       	mov	r5, r1
{
	unsigned int adc_value,ch_count=0;
	unsigned int fwd_flag=0,rev_flag=0,right_flag=0,left_flag=0;
	unsigned int msg1_flag=0,msg1_count=0;
	unsigned int msg2_flag=0,msg2_count=0;
	unsigned int msg3_flag=0,msg3_count=0;
 1c0:	18 86       	std	Y+8, r1	; 0x08
 1c2:	1f 82       	std	Y+7, r1	; 0x07
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
int main()
{
	unsigned int adc_value,ch_count=0;
	unsigned int fwd_flag=0,rev_flag=0,right_flag=0,left_flag=0;
	unsigned int msg1_flag=0,msg1_count=0;
	unsigned int msg2_flag=0,msg2_count=0;
 1c8:	1c 82       	std	Y+4, r1	; 0x04
 1ca:	1b 82       	std	Y+3, r1	; 0x03
 1cc:	e1 2c       	mov	r14, r1
 1ce:	f1 2c       	mov	r15, r1

int main()
{
	unsigned int adc_value,ch_count=0;
	unsigned int fwd_flag=0,rev_flag=0,right_flag=0,left_flag=0;
	unsigned int msg1_flag=0,msg1_count=0;
 1d0:	61 2c       	mov	r6, r1
 1d2:	71 2c       	mov	r7, r1
 1d4:	1c 86       	std	Y+12, r1	; 0x0c
 1d6:	1b 86       	std	Y+11, r1	; 0x0b
}

int main()
{
	unsigned int adc_value,ch_count=0;
	unsigned int fwd_flag=0,rev_flag=0,right_flag=0,left_flag=0;
 1d8:	1a 82       	std	Y+2, r1	; 0x02
 1da:	19 82       	std	Y+1, r1	; 0x01
 1dc:	1e 82       	std	Y+6, r1	; 0x06
 1de:	1d 82       	std	Y+5, r1	; 0x05
 1e0:	a1 2c       	mov	r10, r1
 1e2:	b1 2c       	mov	r11, r1
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	10 e0       	ldi	r17, 0x00	; 0
	return t;
}

int main()
{
	unsigned int adc_value,ch_count=0;
 1e8:	21 2c       	mov	r2, r1
 1ea:	31 2c       	mov	r3, r1
	
	LCD_Init();
	ADC_Init();
	while(1)
	{
		ch_count++;
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	22 1a       	sub	r2, r18
 1f0:	32 0a       	sbc	r3, r18
		if(ch_count==1) ADMUX = 0x40 ; // ADMUX Selects channel
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	28 16       	cp	r2, r24
 1f6:	31 04       	cpc	r3, r1
 1f8:	19 f4       	brne	.+6      	; 0x200 <main+0x76>
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	87 b9       	out	0x07, r24	; 7
 1fe:	14 c0       	rjmp	.+40     	; 0x228 <main+0x9e>
		else if (ch_count==2) ADMUX = 0x41 ;
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	29 16       	cp	r2, r25
 204:	31 04       	cpc	r3, r1
 206:	19 f4       	brne	.+6      	; 0x20e <main+0x84>
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	87 b9       	out	0x07, r24	; 7
 20c:	0d c0       	rjmp	.+26     	; 0x228 <main+0x9e>
		else if (ch_count==3) ADMUX = 0x42;
 20e:	23 e0       	ldi	r18, 0x03	; 3
 210:	22 16       	cp	r2, r18
 212:	31 04       	cpc	r3, r1
 214:	19 f4       	brne	.+6      	; 0x21c <main+0x92>
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	87 b9       	out	0x07, r24	; 7
 21a:	06 c0       	rjmp	.+12     	; 0x228 <main+0x9e>
		else if (ch_count==4) ADMUX = 0x43;
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	28 16       	cp	r2, r24
 220:	31 04       	cpc	r3, r1
 222:	11 f4       	brne	.+4      	; 0x228 <main+0x9e>
 224:	83 e4       	ldi	r24, 0x43	; 67
 226:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADEN) | (1<<ADSC); // ADC Enable - ADC Start Conversion
 228:	86 b1       	in	r24, 0x06	; 6
 22a:	80 6c       	ori	r24, 0xC0	; 192
 22c:	86 b9       	out	0x06, r24	; 6
		while(!(ADCSRA & (1<<ADIF)));
 22e:	34 9b       	sbis	0x06, 4	; 6
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0xa4>
		ADCSRA |= (1<<ADIF); // ADC Interrupt Flag
 232:	86 b1       	in	r24, 0x06	; 6
 234:	80 61       	ori	r24, 0x10	; 16
 236:	86 b9       	out	0x06, r24	; 6
		adc_value = ADC_Convert();	// Convert input voltages from sensors into hex values then into decimal values
 238:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_Convert>
		int ADCAvgVal = 820;
				// if first Flex Sensor

		if(ch_count==1)
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	22 16       	cp	r2, r18
 240:	31 04       	cpc	r3, r1
 242:	61 f4       	brne	.+24     	; 0x25c <main+0xd2>
		{
			if(adc_value>ADCAvgVal)
 244:	85 33       	cpi	r24, 0x35	; 53
 246:	93 40       	sbci	r25, 0x03	; 3
 248:	e8 f1       	brcs	.+122    	; 0x2c4 <main+0x13a>
			{
				PORTB = 0x15; //Blink LED Num 1
 24a:	85 e1       	ldi	r24, 0x15	; 21
 24c:	88 bb       	out	0x18, r24	; 24
				fwd_flag=1;
				msg1_flag = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	9c 87       	std	Y+12, r25	; 0x0c
 254:	8b 87       	std	Y+11, r24	; 0x0b
		if(ch_count==1)
		{
			if(adc_value>ADCAvgVal)
			{
				PORTB = 0x15; //Blink LED Num 1
				fwd_flag=1;
 256:	01 e0       	ldi	r16, 0x01	; 1
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	51 c0       	rjmp	.+162    	; 0x2fe <main+0x174>
				msg1_flag=0;
			}
		}
				   // if Second Flex Sensor

		else if(ch_count==2)
 25c:	22 e0       	ldi	r18, 0x02	; 2
 25e:	22 16       	cp	r2, r18
 260:	31 04       	cpc	r3, r1
 262:	69 f4       	brne	.+26     	; 0x27e <main+0xf4>
		{
			if(adc_value>ADCAvgVal)
 264:	85 33       	cpi	r24, 0x35	; 53
 266:	93 40       	sbci	r25, 0x03	; 3
 268:	a0 f1       	brcs	.+104    	; 0x2d2 <main+0x148>
			{
				PORTB = 0x21; //Blink LED Num 2
 26a:	81 e2       	ldi	r24, 0x21	; 33
 26c:	88 bb       	out	0x18, r24	; 24
				left_flag=1;
				msg2_flag=1;
 26e:	ee 24       	eor	r14, r14
 270:	e3 94       	inc	r14
 272:	f1 2c       	mov	r15, r1
		else if(ch_count==2)
		{
			if(adc_value>ADCAvgVal)
			{
				PORTB = 0x21; //Blink LED Num 2
				left_flag=1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	40 c0       	rjmp	.+128    	; 0x2fe <main+0x174>
				msg2_flag=0;
				}
		}
				  // if third Flex Sensor.

		else if(ch_count==3)
 27e:	23 e0       	ldi	r18, 0x03	; 3
 280:	22 16       	cp	r2, r18
 282:	31 04       	cpc	r3, r1
 284:	69 f4       	brne	.+26     	; 0x2a0 <main+0x116>
		{
			if(adc_value>ADCAvgVal)
 286:	85 33       	cpi	r24, 0x35	; 53
 288:	93 40       	sbci	r25, 0x03	; 3
 28a:	50 f1       	brcs	.+84     	; 0x2e0 <main+0x156>
			{
				PORTB = 0x44; //Blink LED Num 3
 28c:	84 e4       	ldi	r24, 0x44	; 68
 28e:	88 bb       	out	0x18, r24	; 24
				right_flag=1;
				msg3_flag=1;
 290:	cc 24       	eor	r12, r12
 292:	c3 94       	inc	r12
 294:	d1 2c       	mov	r13, r1
		else if(ch_count==3)
		{
			if(adc_value>ADCAvgVal)
			{
				PORTB = 0x44; //Blink LED Num 3
				right_flag=1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9e 83       	std	Y+6, r25	; 0x06
 29c:	8d 83       	std	Y+5, r24	; 0x05
 29e:	2f c0       	rjmp	.+94     	; 0x2fe <main+0x174>
				msg3_flag=0;
				}
		}
				  // if fourth Flex Sensor.

		else if(ch_count==4)
 2a0:	24 e0       	ldi	r18, 0x04	; 4
 2a2:	22 16       	cp	r2, r18
 2a4:	31 04       	cpc	r3, r1
 2a6:	59 f5       	brne	.+86     	; 0x2fe <main+0x174>
		{
			if(adc_value>ADCAvgVal)
 2a8:	85 33       	cpi	r24, 0x35	; 53
 2aa:	93 40       	sbci	r25, 0x03	; 3
 2ac:	00 f1       	brcs	.+64     	; 0x2ee <main+0x164>
			{
				PORTB = 0x8A; //Blink LED Num 4
 2ae:	8a e8       	ldi	r24, 0x8A	; 138
 2b0:	88 bb       	out	0x18, r24	; 24
				rev_flag=1;
 2b2:	44 24       	eor	r4, r4
 2b4:	43 94       	inc	r4
 2b6:	51 2c       	mov	r5, r1
 2b8:	aa 24       	eor	r10, r10
 2ba:	a3 94       	inc	r10
 2bc:	b1 2c       	mov	r11, r1
			else {
				rev_flag=0;
				msg4_count=0;
				msg4_flag=0;
			}
			ch_count=0;
 2be:	21 2c       	mov	r2, r1
 2c0:	31 2c       	mov	r3, r1
 2c2:	1d c0       	rjmp	.+58     	; 0x2fe <main+0x174>
				msg1_flag = 1;
			}
			else
			{
				fwd_flag=0;
				msg1_count=0;
 2c4:	61 2c       	mov	r6, r1
 2c6:	71 2c       	mov	r7, r1
				msg1_flag=0;
 2c8:	1c 86       	std	Y+12, r1	; 0x0c
 2ca:	1b 86       	std	Y+11, r1	; 0x0b
				fwd_flag=1;
				msg1_flag = 1;
			}
			else
			{
				fwd_flag=0;
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	16 c0       	rjmp	.+44     	; 0x2fe <main+0x174>
				left_flag=1;
				msg2_flag=1;
			}
			else {
				left_flag=0;
				msg2_count=0;
 2d2:	1c 82       	std	Y+4, r1	; 0x04
 2d4:	1b 82       	std	Y+3, r1	; 0x03
				msg2_flag=0;
 2d6:	e1 2c       	mov	r14, r1
 2d8:	f1 2c       	mov	r15, r1
				PORTB = 0x21; //Blink LED Num 2
				left_flag=1;
				msg2_flag=1;
			}
			else {
				left_flag=0;
 2da:	1a 82       	std	Y+2, r1	; 0x02
 2dc:	19 82       	std	Y+1, r1	; 0x01
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <main+0x174>
				right_flag=1;
				msg3_flag=1;
			}
			else {
				right_flag=0;
				msg3_count=0;
 2e0:	18 86       	std	Y+8, r1	; 0x08
 2e2:	1f 82       	std	Y+7, r1	; 0x07
				msg3_flag=0;
 2e4:	c1 2c       	mov	r12, r1
 2e6:	d1 2c       	mov	r13, r1
				PORTB = 0x44; //Blink LED Num 3
				right_flag=1;
				msg3_flag=1;
			}
			else {
				right_flag=0;
 2e8:	1e 82       	std	Y+6, r1	; 0x06
 2ea:	1d 82       	std	Y+5, r1	; 0x05
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <main+0x174>
				rev_flag=1;
				msg4_flag=1;
			}
			else {
				rev_flag=0;
				msg4_count=0;
 2ee:	1a 86       	std	Y+10, r1	; 0x0a
 2f0:	19 86       	std	Y+9, r1	; 0x09
				PORTB = 0x8A; //Blink LED Num 4
				rev_flag=1;
				msg4_flag=1;
			}
			else {
				rev_flag=0;
 2f2:	41 2c       	mov	r4, r1
 2f4:	51 2c       	mov	r5, r1
 2f6:	a1 2c       	mov	r10, r1
 2f8:	b1 2c       	mov	r11, r1
				msg4_count=0;
				msg4_flag=0;
			}
			ch_count=0;
 2fa:	21 2c       	mov	r2, r1
 2fc:	31 2c       	mov	r3, r1
		}
				  // if all flags equals 0 means no flex sensor is bending.

		if((fwd_flag==0) && (rev_flag==0) && (left_flag==0) && (right_flag==0))
 2fe:	01 15       	cp	r16, r1
 300:	11 05       	cpc	r17, r1
 302:	a1 f4       	brne	.+40     	; 0x32c <main+0x1a2>
 304:	a1 14       	cp	r10, r1
 306:	b1 04       	cpc	r11, r1
 308:	89 f4       	brne	.+34     	; 0x32c <main+0x1a2>
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	89 2b       	or	r24, r25
 310:	69 f4       	brne	.+26     	; 0x32c <main+0x1a2>
 312:	8d 81       	ldd	r24, Y+5	; 0x05
 314:	9e 81       	ldd	r25, Y+6	; 0x06
 316:	89 2b       	or	r24, r25
 318:	49 f4       	brne	.+18     	; 0x32c <main+0x1a2>
		{
			PORTB = 0x00;
 31a:	18 ba       	out	0x18, r1	; 24
			msg1_flag=0;
			msg2_flag=0;
			msg3_flag=0;
			msg4_flag=0;
 31c:	41 2c       	mov	r4, r1
 31e:	51 2c       	mov	r5, r1
		if((fwd_flag==0) && (rev_flag==0) && (left_flag==0) && (right_flag==0))
		{
			PORTB = 0x00;
			msg1_flag=0;
			msg2_flag=0;
			msg3_flag=0;
 320:	c1 2c       	mov	r12, r1
 322:	d1 2c       	mov	r13, r1

		if((fwd_flag==0) && (rev_flag==0) && (left_flag==0) && (right_flag==0))
		{
			PORTB = 0x00;
			msg1_flag=0;
			msg2_flag=0;
 324:	e1 2c       	mov	r14, r1
 326:	f1 2c       	mov	r15, r1
				  // if all flags equals 0 means no flex sensor is bending.

		if((fwd_flag==0) && (rev_flag==0) && (left_flag==0) && (right_flag==0))
		{
			PORTB = 0x00;
			msg1_flag=0;
 328:	1c 86       	std	Y+12, r1	; 0x0c
 32a:	1b 86       	std	Y+11, r1	; 0x0b
			msg4_flag=0;
		}
		
				  // if msg1 flag = 1 means eno f forward direction

		if(msg1_flag==1)
 32c:	8b 85       	ldd	r24, Y+11	; 0x0b
 32e:	9c 85       	ldd	r25, Y+12	; 0x0c
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	c1 f4       	brne	.+48     	; 0x364 <main+0x1da>
		{
			//Forward
			if(msg1_count==0)
 334:	61 14       	cp	r6, r1
 336:	71 04       	cpc	r7, r1
 338:	09 f0       	breq	.+2      	; 0x33c <main+0x1b2>
 33a:	58 cf       	rjmp	.-336    	; 0x1ec <main+0x62>
			{
				{
					// Print ll direction bta3o 3la el LCD
					
					CommandLine_Place(0x01);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("Car");
 342:	8e e6       	ldi	r24, 0x6E	; 110
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					CommandLine_Place(0xC0);
 34a:	80 ec       	ldi	r24, 0xC0	; 192
 34c:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("moving forward");
 350:	82 e7       	ldi	r24, 0x72	; 114
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					
					//msg1_flag=0;
					msg1_count++; // to break el if cond
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	69 1a       	sub	r6, r25
 35c:	79 0a       	sbc	r7, r25
					msg5_count=0; // go to Status "STOP"
 35e:	81 2c       	mov	r8, r1
 360:	91 2c       	mov	r9, r1
 362:	44 cf       	rjmp	.-376    	; 0x1ec <main+0x62>
				}
			}
		}
						  // if msg2 flag = 1 means eno f Left direction

		else if(msg2_flag==1)
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	e2 16       	cp	r14, r18
 368:	f1 04       	cpc	r15, r1
 36a:	d9 f4       	brne	.+54     	; 0x3a2 <main+0x218>
		{
			//Left
			if(msg2_count==0)
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	9c 81       	ldd	r25, Y+4	; 0x04
 370:	89 2b       	or	r24, r25
 372:	09 f0       	breq	.+2      	; 0x376 <main+0x1ec>
 374:	3b cf       	rjmp	.-394    	; 0x1ec <main+0x62>
			{
				{
					// Print ll direction bta3o 3la el LCD

					CommandLine_Place(0x01);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("Car");
 37c:	8e e6       	ldi	r24, 0x6E	; 110
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					CommandLine_Place(0xC0);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("turning left");
 38a:	81 e8       	ldi	r24, 0x81	; 129
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					
					//msg2_flag=0;
					msg2_count++; // to break el if cond
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	9c 81       	ldd	r25, Y+4	; 0x04
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	9c 83       	std	Y+4, r25	; 0x04
 39a:	8b 83       	std	Y+3, r24	; 0x03
					msg5_count=0; // go to Status "STOP"
 39c:	81 2c       	mov	r8, r1
 39e:	91 2c       	mov	r9, r1
 3a0:	25 cf       	rjmp	.-438    	; 0x1ec <main+0x62>
				}
			}
		}
						  // if msg3 flag = 1 means eno f right direction

		else if(msg3_flag==1)
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	c9 16       	cp	r12, r25
 3a6:	d1 04       	cpc	r13, r1
 3a8:	d9 f4       	brne	.+54     	; 0x3e0 <main+0x256>
		{
			//Right
			if(msg3_count==0)
 3aa:	8f 81       	ldd	r24, Y+7	; 0x07
 3ac:	98 85       	ldd	r25, Y+8	; 0x08
 3ae:	89 2b       	or	r24, r25
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0x22a>
 3b2:	1c cf       	rjmp	.-456    	; 0x1ec <main+0x62>
			{
				{
					// Print ll direction bta3o 3la el LCD

					CommandLine_Place(0x01);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("Car");
 3ba:	8e e6       	ldi	r24, 0x6E	; 110
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					CommandLine_Place(0xC0);
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("turning right");
 3c8:	8e e8       	ldi	r24, 0x8E	; 142
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					
					//msg3_flag=0;
					msg3_count++; // to break el if cond
 3d0:	8f 81       	ldd	r24, Y+7	; 0x07
 3d2:	98 85       	ldd	r25, Y+8	; 0x08
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	98 87       	std	Y+8, r25	; 0x08
 3d8:	8f 83       	std	Y+7, r24	; 0x07
					msg5_count=0; // go to Status "STOP"
 3da:	81 2c       	mov	r8, r1
 3dc:	91 2c       	mov	r9, r1
 3de:	06 cf       	rjmp	.-500    	; 0x1ec <main+0x62>
				}
			}
		}
						  // if msg4 flag = 1 means eno f backward direction

		else if(msg4_flag==1)
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	49 16       	cp	r4, r25
 3e4:	51 04       	cpc	r5, r1
 3e6:	d9 f4       	brne	.+54     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			//Backward
			if(msg4_count==0)
 3e8:	89 85       	ldd	r24, Y+9	; 0x09
 3ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ec:	89 2b       	or	r24, r25
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x268>
 3f0:	fd ce       	rjmp	.-518    	; 0x1ec <main+0x62>
			{
				{
					// Print ll direction bta3o 3la el LCD

					CommandLine_Place(0x01);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("Car");
 3f8:	8e e6       	ldi	r24, 0x6E	; 110
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					CommandLine_Place(0xC0);
 400:	80 ec       	ldi	r24, 0xC0	; 192
 402:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
					LCD_Write("moving backward");
 406:	8c e9       	ldi	r24, 0x9C	; 156
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
					
					//msg4_flag=0;
					msg4_count++; // to break el if cond
 40e:	89 85       	ldd	r24, Y+9	; 0x09
 410:	9a 85       	ldd	r25, Y+10	; 0x0a
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	9a 87       	std	Y+10, r25	; 0x0a
 416:	89 87       	std	Y+9, r24	; 0x09
					msg5_count=0; // go to Status "STOP"
 418:	81 2c       	mov	r8, r1
 41a:	91 2c       	mov	r9, r1
 41c:	e7 ce       	rjmp	.-562    	; 0x1ec <main+0x62>
			}
		}
		else
		{
			// car not moving
			if(msg5_count==0)
 41e:	81 14       	cp	r8, r1
 420:	91 04       	cpc	r9, r1
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	e3 ce       	rjmp	.-570    	; 0x1ec <main+0x62>
			{
				// Print ll direction bta3o 3la el LCD

				CommandLine_Place(0x01);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
				LCD_Write("Car");
 42c:	8e e6       	ldi	r24, 0x6E	; 110
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
				CommandLine_Place(0xC0);
 434:	80 ec       	ldi	r24, 0xC0	; 192
 436:	0e 94 52 00 	call	0xa4	; 0xa4 <CommandLine_Place>
				LCD_Write("is not moving");
 43a:	8c ea       	ldi	r24, 0xAC	; 172
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Write>
				
				msg5_count++; // to break el if cond
 442:	9f ef       	ldi	r25, 0xFF	; 255
 444:	89 1a       	sub	r8, r25
 446:	99 0a       	sbc	r9, r25
 448:	d1 ce       	rjmp	.-606    	; 0x1ec <main+0x62>

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
